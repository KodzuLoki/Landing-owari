{"remainingRequest":"C:\\Users\\eliot\\Documents\\GitHub\\vuetify-landing-page\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!C:\\Users\\eliot\\Documents\\GitHub\\vuetify-landing-page\\src\\components\\AboutSection.vue?vue&type=template&id=292bd2c8&scoped=true","dependencies":[{"path":"C:\\Users\\eliot\\Documents\\GitHub\\vuetify-landing-page\\src\\components\\AboutSection.vue","mtime":1699371564840},{"path":"C:\\Users\\eliot\\Documents\\GitHub\\vuetify-landing-page\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1699291026305},{"path":"C:\\Users\\eliot\\Documents\\GitHub\\vuetify-landing-page\\node_modules\\vuetify-loader\\lib\\loader.js","mtime":1699291337750},{"path":"C:\\Users\\eliot\\Documents\\GitHub\\vuetify-landing-page\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1699291026305},{"path":"C:\\Users\\eliot\\Documents\\GitHub\\vuetify-landing-page\\node_modules\\babel-loader\\lib\\index.js","mtime":1699291333518},{"path":"C:\\Users\\eliot\\Documents\\GitHub\\vuetify-landing-page\\node_modules\\vue-loader\\lib\\loaders\\templateLoader.js","mtime":1699291337745},{"path":"C:\\Users\\eliot\\Documents\\GitHub\\vuetify-landing-page\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1699291026305},{"path":"C:\\Users\\eliot\\Documents\\GitHub\\vuetify-landing-page\\node_modules\\vue-loader\\lib\\index.js","mtime":1699291335371}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:CjxzZWN0aW9uIGlkPSJhYm91dCI+CiAgPHYtY29udGFpbmVyIGZsdWlkPgogICAgPHYtcm93IGFsaWduPSJjZW50ZXIiIGp1c3RpZnk9ImNlbnRlciI+CiAgICAgIDx2LWNvbCBjb2xzPSIxMCI+CiAgICAgICAgPHYtcm93IGFsaWduPSJjZW50ZXIiIGp1c3RpZnk9ImNlbnRlciI+CiAgICAgICAgICA8di1jb2wgY29scz0iMTIiIG1kPSI3Ij4KICAgICAgICAgICAgPGgxIGNsYXNzPSJmb250LXdlaWdodC1saWdodCBkaXNwbGF5LTIgd2hpdGUtLXRleHQiPkRhdG9zIHNvYnJlIGxvcyBwYW5hd2FyaXM8L2gxPgogICAgICAgICAgICA8YnI+CiAgICAgICAgICAgIDx2LXJvdz4KICAgICAgICAgICAgICA8aDMgY2xhc3M9InRleHQtanVzdGlmeSB3aGl0ZS0tdGV4dCI+RGF0byBkZSBudWVzdHJvIGRlYnV0OiA8L2gzPgogICAgICAgICAgICAgIDx2LWNvbCBjb2xzPSIxMiIgY2xhc3M9ImQtZmxleCBhbGlnbi1jZW50ZXIiPgogICAgICAgICAgICAgICAgPHYtaW1nCiAgICAgICAgICAgICAgICAgIHNyYz0iQC9hc3NldHMvaW1nL2JhbmQucG5nIgogICAgICAgICAgICAgICAgICBtYXgtd2lkdGg9IjYwcHgiCiAgICAgICAgICAgICAgICAgIGNsYXNzPSJtci00IgogICAgICAgICAgICAgICAgLz4KICAgICAgICAgICAgICAgIDxwIGNsYXNzPSJ0ZXh0LWp1c3RpZnkgd2hpdGUtLXRleHQiPgogICAgICAgICAgICAgICAgICBlbiBudWVzdHJvIGRlYnV0IG5vIGNvbnRhYmFtb3MgY29uIHVuICdlbmNvcmUnLCBzaWVuZG8gcG9yIGVzdG8gcmVwZXRpbW9zIHVuYSBjYW5jaW9uIGRlbCBzZXRsaXN0IGEgcGVkaWRvIGRlbCBwdWJsaWNvICd0ZWFycyBkb250IGZhbGwnLgogICAgICAgICAgICAgICAgPC9wPgogICAgICAgICAgICAgIDwvdi1jb2w+CiAgICAgICAgICAgICAgPGJyPgogICAgICAgICAgICAgIDxoMyBjbGFzcz0idGV4dC1qdXN0aWZ5IHdoaXRlLS10ZXh0Ij5JbmZsdWVuY2lhcyBtdXNpY2FsZXM6IDwvaDM+CiAgICAgICAgICAgICAgPHYtY29sIGNvbHM9IjEyIiBjbGFzcz0iZC1mbGV4IGFsaWduLWNlbnRlciI+CiAgICAgICAgICAgICAgICA8di1pbWcKICAgICAgICAgICAgICAgICAgc3JjPSJAL2Fzc2V0cy9pbWcvaW5mbHVlbmNpYXMucG5nIgogICAgICAgICAgICAgICAgICBtYXgtd2lkdGg9IjYwcHgiCiAgICAgICAgICAgICAgICAgIGNsYXNzPSJtci00IgogICAgICAgICAgICAgICAgLz4KICAgICAgICAgICAgICAgIDxwIGNsYXNzPSJ0ZXh0LWp1c3RpZnkgd2hpdGUtLXRleHQiPgogICAgICAgICAgICAgICAgICBEZW50cm8gZGUgbnVlc3RyYXMgaW5mbHVlbmNpYXMgbXVzaWNhbGVzIHNlIGVuY3VlbnRyYW4gYmFuZGFzIGNvbW86IFRyaXZpdW0sIEJ1bGxldCBGb3IgTXkgVmFsZW50aW5lLAogICAgICAgICAgICAgICAgICBLaWxsc3dpdGNoIEVuZ2FnZSwgQnJpbmcgTWUgVGhlIEhvcml6b24sIEEgRGF5IFRvIFJlbWVtYmVyLCBlbnRyZSBvdHJvcy4KICAgICAgICAgICAgICAgIDwvcD4KICAgICAgICAgICAgICA8L3YtY29sPgogICAgICAgICAgICAgIDxicj4KICAgICAgICAgICAgICA8aDMgY2xhc3M9InRleHQtanVzdGlmeSB3aGl0ZS0tdGV4dCI+IkJhc3RoeSIgVm9jYWxpc3RhOjwvaDM+CiAgICAgICAgICAgICAgPHYtY29sIGNvbHM9IjEyIiBjbGFzcz0iZC1mbGV4IGFsaWduLWNlbnRlciI+CiAgICAgICAgICAgICAgICA8di1pbWcKICAgICAgICAgICAgICAgICAgc3JjPSJAL2Fzc2V0cy9pbWcvYmFzdGh5LnBuZyIKICAgICAgICAgICAgICAgICAgbWF4LXdpZHRoPSI2MHB4IgogICAgICAgICAgICAgICAgICBjbGFzcz0ibXItNCIKICAgICAgICAgICAgICAgIC8+CiAgICAgICAgICAgICAgICA8cCBjbGFzcz0idGV4dC1qdXN0aWZ5IHdoaXRlLS10ZXh0Ij4KICAgICAgICAgICAgICAgICAgQmFzdGh5LCBCYXN0aHkgSm9lc3RhciwgQmFzdGlhbiBKb3PDqSBFc3RyZWxsYXMsIEFsYWlhcyBwYSBsb3MgYW1pZ29zLgogICAgICAgICAgICAgICAgICA8YnI+CiAgICAgICAgICAgICAgICAgIEZhbmJveSBkZWwgbXVuZG8gbWFuZ2EsIGFuaW1lIHkgdmlkZW9qdWVnb3MsIHNvYnJlIHRvZG8gbG8gcXVlIHRlbmdhIHF1ZSB2ZXIgY29uIEFzYW5vIEluaW8geSBlbCBPbmUgUGllY2UgZXMgcmVhbC4gCiAgICAgICAgICAgICAgICAgIDxicj4KICAgICAgICAgICAgICAgICAgRW5hbW9yYW9oJyBkZSBIb2xsb3cgS25pZ3RoLCBMZWdlbmQgb2YgWmVsZGEgeSBTaWxlbnQgSGlsbC4gCiAgICAgICAgICAgICAgICAgIDxicj4KICAgICAgICAgICAgICAgICAgU3VzIGJhbmRhcyBmYXZvcml0YXMgc29uIFJhZGlvaGVhZCwgSWNlIG5pbmUga2lsbHMsIEJNVEggeSBBRFRSLgogICAgICAgICAgICAgICAgPC9wPgogICAgICAgICAgICAgIDwvdi1jb2w+CiAgICAgICAgICAgICAgPGJyPgogICAgICAgICAgICAgIDxoMyBjbGFzcz0idGV4dC1qdXN0aWZ5IHdoaXRlLS10ZXh0Ij4iV2lubyIgUHJpbWVyYSBHdWl0YXJyYTo8L2gzPgogICAgICAgICAgICAgIDx2LWNvbCBjb2xzPSIxMiIgY2xhc3M9ImQtZmxleCBhbGlnbi1jZW50ZXIiPgogICAgICAgICAgICAgICAgPHYtaW1nCiAgICAgICAgICAgICAgICAgIHNyYz0iQC9hc3NldHMvaW1nL3dpbm8ucG5nIgogICAgICAgICAgICAgICAgICBtYXgtd2lkdGg9IjYwcHgiCiAgICAgICAgICAgICAgICAgIGNsYXNzPSJtci00IgogICAgICAgICAgICAgICAgLz4KICAgICAgICAgICAgICAgIDxwIGNsYXNzPSJ0ZXh0LWp1c3RpZnkgd2hpdGUtLXRleHQiPgogICAgICAgICAgICAgICAgICBndWl0YXJyaXN0YSBkZXNkZSBsb3MgMTIgYcOxb3MsIHNpZW5kbyBwYXJ0w61jaXBlIGVuIGRvcyBiYW5kYXMgYWN0dWFsbWVudGUuIAogICAgICAgICAgICAgICAgICA8YnI+CiAgICAgICAgICAgICAgICAgIEVzIGxvbGVybyBwb3IgbG8gcXVlIGVzIHJlcGVsZW50ZSBhbCBhZ3VhLCBsZSBndXN0YSB2ZXIgc2VyaWVzLCB2aWRlb3MgZGUgbcO6c2ljYSB5IHNhY2Fyc2UgcmlmZnMgY29tcGxlam9zIHBlcm8gbnVuY2EgbGEgY2FuY2nDs24gY29tcGxldGEuIAogICAgICAgICAgICAgICAgICA8YnI+CiAgICAgICAgICAgICAgICAgIERlc2RlIG11eSBwZXF1ZcOxbyBzZSBlbnR1c2lhc23DsyBwb3IgbGEgbcO6c2ljYSB5YSBxdWUgc3UgaGVybWFubyAoZWwgYmF0ZXJpc3RhKSBlc2N1Y2hhYmEgZXN0ZSBnw6luZXJvLCB0YWxlcyBiYW5kYXMgY29tbyBLaWxsc3dpdGNoIEVuZ2FnZSwgCiAgICAgICAgICAgICAgICAgIFRyaXZpdW0sIEFzIEkgTGF5IER5aW5nIHNvbiBwYXJ0ZSBkZSBzdSBpbnNwaXJhY2nDs24gYWwgY29tcG9uZXIgcmlmZnMgcGFyYSBsYSBiYW5kYS4gCiAgICAgICAgICAgICAgICAgIDxicj4KICAgICAgICAgICAgICAgICAgQWN0dWFsbWVudGUgV2lubyBzZSBlbmN1ZW50cmEgZXN0dWRpYW5kbyBUZWNub2xvZ8OtYSBNw6lkaWNhIHkgZXMgZmVsaXogc2llbmRvIHBhcnRlIGRlIE93YXJpLgogICAgICAgICAgICAgICAgPC9wPgogICAgICAgICAgICAgIDwvdi1jb2w+CiAgICAgICAgICAgICAgPGJyPgogICAgICAgICAgICAgIDxoMyBjbGFzcz0idGV4dC1qdXN0aWZ5IHdoaXRlLS10ZXh0Ij4iUGlwZSIgU2VndW5kYSBHdWl0YXJyYTo8L2gzPgogICAgICAgICAgICAgIDx2LWNvbCBjb2xzPSIxMiIgY2xhc3M9ImQtZmxleCBhbGlnbi1jZW50ZXIiPgogICAgICAgICAgICAgICAgPHYtaW1nCiAgICAgICAgICAgICAgICAgIHNyYz0iQC9hc3NldHMvaW1nL3BpcGUucG5nIgogICAgICAgICAgICAgICAgICBtYXgtd2lkdGg9IjYwcHgiCiAgICAgICAgICAgICAgICAgIGNsYXNzPSJtci00IgogICAgICAgICAgICAgICAgLz4KICAgICAgICAgICAgICAgIDxwIGNsYXNzPSJ0ZXh0LWp1c3RpZnkgd2hpdGUtLXRleHQiPgogICAgICAgICAgICAgICAgICBHdWl0YXJyaXN0YSBkZXNkZSBxdWUgaWJhIGVuIGVsIGNvbGVnaW8sIEluZyBlbiBzb25pZG8gZGUgcHJvZmVzacOzbiwgZWwgUGlwZWNrbGVzcyBvIFZlbmRhdmFsIEVzdHVkaW9zLCBtYWxkaXRvIGxvbGVybywgCiAgICAgICAgICAgICAgICAgIGZhbsOhdGljbyBkZSBsYSBtw7pzaWNhIGVuIGdlbmVyYWwsIHN1cyBsaXN0YXMgZGUgU3BvdGlmeSB2YW4gZGVzZGUgZWwgcmVnZ2FldMOzbiBtw6FzIGNvY2hpbm8sIGhhc3RhIHVuIGRlYXRoY29yZSBzYXTDoW5pY28uCiAgICAgICAgICAgICAgICA8L3A+CiAgICAgICAgICAgICAgPC92LWNvbD4KICAgICAgICAgICAgICA8YnI+CiAgICAgICAgICAgICAgPGgzIGNsYXNzPSJ0ZXh0LWp1c3RpZnkgd2hpdGUtLXRleHQiPiJMb2tpIiBCYWpvIHkgc2VndW5kYSB2b3o6PC9oMz4KICAgICAgICAgICAgICA8di1jb2wgY29scz0iMTIiIGNsYXNzPSJkLWZsZXggYWxpZ24tY2VudGVyIj4KICAgICAgICAgICAgICAgIDx2LWltZwogICAgICAgICAgICAgICAgICBzcmM9IkAvYXNzZXRzL2ltZy9sb2tpLnBuZyIKICAgICAgICAgICAgICAgICAgbWF4LXdpZHRoPSI2MHB4IgogICAgICAgICAgICAgICAgICBjbGFzcz0ibXItNCIKICAgICAgICAgICAgICAgIC8+CiAgICAgICAgICAgICAgICA8cCBjbGFzcz0idGV4dC1qdXN0aWZ5IHdoaXRlLS10ZXh0Ij4KICAgICAgICAgICAgICAgICAgTG9raSwgZWxpb3RoLCBrYXp1CiAgICAgICAgICAgICAgICAgIDxicj4KICAgICAgICAgICAgICAgICAgQmFqaXN0YSBkZSBsb3MgOCBhw7FvcywgY3VlbnRhIGxhIGxleWVuZGEgcXVlIGxlIGhhYmlhIGxsYW1hZG8gYSBzdSBiYWpvICJzaGFkb3ciLCBsZSBhcGFzaW9uYSBsYSBtdXNpY2EgamFwb25lc2EgY29tbyB0b2RhIGxhIGN1bHR1cmEgZGUgYXF1ZWwgcGFpcywKICAgICAgICAgICAgICAgICAgZWwgbWFzIGZyaWtpIGRlIGxhIGJhbmRhLCBkaWNlbiBxdWUgbm8gc2UgYmHDsWEgKGVzIG90YWt1KS4KICAgICAgICAgICAgICAgICAgPGJyPgogICAgICAgICAgICAgICAgICBTdXMgYmFuZGFzIGZhdm9yaXRhcyBzb24gVHJpdml1bSwgU2ltcGxlIHBsYW4geSBLaXp1LgogICAgICAgICAgICAgICAgPC9wPgogICAgICAgICAgICAgIDwvdi1jb2w+CiAgICAgICAgICAgICAgPGJyPgogICAgICAgICAgICAgIDxoMyBjbGFzcz0idGV4dC1qdXN0aWZ5IHdoaXRlLS10ZXh0Ij4iSm9zaSIgQmF0ZXJpYTo8L2gzPgogICAgICAgICAgICAgIDx2LWNvbCBjb2xzPSIxMiIgY2xhc3M9ImQtZmxleCBhbGlnbi1jZW50ZXIiPgogICAgICAgICAgICAgICAgPHYtaW1nCiAgICAgICAgICAgICAgICAgIHNyYz0iQC9hc3NldHMvaW1nL0pvc2UucG5nIgogICAgICAgICAgICAgICAgICBtYXgtd2lkdGg9IjYwcHgiCiAgICAgICAgICAgICAgICAgIGNsYXNzPSJtci00IgogICAgICAgICAgICAgICAgLz4KICAgICAgICAgICAgICAgIDxwIGNsYXNzPSJ0ZXh0LWp1c3RpZnkgd2hpdGUtLXRleHQiPgogICAgICAgICAgICAgICAgICBMb3JlbSBpcHN1bSBkb2xvciBzaXQgYW1ldCBjb25zZWN0ZXR1ciwgYWRpcGlzaWNpbmcgZWxpdC4KICAgICAgICAgICAgICAgICAgTG9yZW0gaXBzdW0gZG9sb3Igc2l0IGFtZXQgY29uc2VjdGV0dXIsIGFkaXBpc2ljaW5nIGVsaXQuCiAgICAgICAgICAgICAgICAgIExvcmVtIGlwc3VtIGRvbG9yIHNpdCBhbWV0IGNvbnNlY3RldHVyLCBhZGlwaXNpY2luZyBlbGl0LgogICAgICAgICAgICAgICAgPC9wPgogICAgICAgICAgICAgIDwvdi1jb2w+CiAgICAgICAgICAgIDwvdi1yb3c+CiAgICAgICAgICAgIDxicj4KICAgICAgICAgIDwvdi1jb2w+CiAgICAgICAgICA8di1jb2wgY29scz0iMTIiIG1kPSI1IiBjbGFzcz0iZC1ub25lIGQtbWQtZmxleCI+CiAgICAgICAgICAgIDxkaXY+CiAgICAgICAgICAgICAgPHZpZGVvIHJlZj0idmlkZW9FbGVtZW50IiA6c3JjPSJ2aWRlb0ZpbGUiIGNvbnRyb2xzIHN0eWxlPSJ3aWR0aDogMzAwcHg7IGhlaWdodDogNDAwcHg7Ij48L3ZpZGVvPgogICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgIDwvdi1jb2w+CiAgICAgICAgPC92LXJvdz4KICAgICAgPC92LWNvbD4KICAgIDwvdi1yb3c+CiAgPC92LWNvbnRhaW5lcj4KPC9zZWN0aW9uPgo="},null]}